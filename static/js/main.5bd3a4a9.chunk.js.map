{"version":3,"sources":["logo.svg","assets/manOnTable.svg","components/header/headerComponent.jsx","components/homepage/homePageComponent.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","headerComponent","className","href","src","Logo","target","to","homePageComponent","Component","App","exact","path","component","HomePage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,+PC2C5BC,MAvCf,WACE,OACE,yBAAKC,UAAU,0BACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,QACb,uBAAGC,KAAK,KACN,yBAAKD,UAAU,UAAUE,IAAKC,QAUlC,yBAAKH,UAAU,cACb,yBAAKA,UAAU,qBACb,uBACEA,UAAU,QACVC,KAAK,+BACLG,OAAO,UAHT,UASJ,yBAAKJ,UAAU,cACb,yBAAKA,UAAU,qBACb,kBAAC,IAAD,CAAMA,UAAU,QAAQK,GAAG,KAA3B,mB,yDCLGC,E,uKAtBX,OACE,6BACE,yBAAKN,UAAU,OACb,yBAAKA,UAAU,mBACb,iDACA,6BACA,0BAAMA,UAAU,YAAhB,+BAEE,6BAFF,iDAGE,6BACA,6BAJF,IAIS,4EAGX,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,UAAUE,IAAKC,a,GAhBVI,aCiBjBC,MAff,WACE,OACE,yBAAKR,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,CAAOS,OAAK,EAACC,KAAK,IAAIC,UAAWC,SCDzBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5bd3a4a9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.af0a93fc.svg\";","module.exports = __webpack_public_path__ + \"static/media/manOnTable.52be3144.svg\";","import React from \"react\";\r\nimport \"./headerstyle.scss\";\r\nimport Logo from \"../../logo.svg\";\r\nimport { Link } from \"react-router-dom\";\r\nfunction headerComponent() {\r\n  return (\r\n    <div className=\"Container NavContainer\">\r\n      <div className=\"row\">\r\n        <div className=\"Logo\">\r\n          <a href=\"/\">\r\n            <img className=\"graphic\" src={Logo}></img>\r\n          </a>\r\n        </div>\r\n        {/* <div className=\"Nav-button\">\r\n          <div className=\"Nav-Button-Inside\">\r\n            <Link className=\"style\" to=\"/\">\r\n              Home\r\n            </Link>\r\n          </div>\r\n        </div> */}\r\n        <div className=\"Nav-button\">\r\n          <div className=\"Nav-Button-Inside\">\r\n            <a\r\n              className=\"style\"\r\n              href=\"https://medium.com/@akash16s\"\r\n              target=\"_blank\"\r\n            >\r\n              Blog\r\n            </a>\r\n          </div>\r\n        </div>\r\n        <div className=\"Nav-button\">\r\n          <div className=\"Nav-Button-Inside\">\r\n            <Link className=\"style\" to=\"/\">\r\n              Contact Me\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default headerComponent;\r\n","import React, { Component } from \"react\";\r\nimport \"./homepagestyle.scss\";\r\nimport Logo from \"../../assets/manOnTable.svg\";\r\n\r\nclass homePageComponent extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"row\">\r\n          <div className=\"container-About\">\r\n            <h1>Hey!! Akash Here,</h1>\r\n            <br />\r\n            <span className=\"Aboutme1\">\r\n              I am a Full Stack Developer.\r\n              <br />I love to engineer and build Amazing products.\r\n              <br />\r\n              <br /> <i>Currently I am General Secretary at BVPIEEE</i>\r\n            </span>\r\n          </div>\r\n          <div className=\"container-art\">\r\n            <img className=\"graphic\" src={Logo}></img>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default homePageComponent;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Switch, BrowserRouter, Route } from \"react-router-dom\";\nimport Header from \"./components/header/headerComponent\";\nimport HomePage from \"./components/homepage/homePageComponent\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Header />\n        <Switch>\n          <div>\n            <Route exact path=\"/\" component={HomePage}></Route>\n          </div>\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}